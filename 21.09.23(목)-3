```jsx
//react 패키지에서 React라는 객체를 가져 온다 , export의 짝꿍
import React from "react";

// 부모에게 파라미터를 받아옴. 
const BucketList = (props) => {
    // 돔으로 나중에 올라갈 리엑트 요소를 넣는다.
    return (
        <div>버킷 리스트</div>
    );
}

//콘포넌트는 만들어 준다고 끝이 아니다. 여기저기 다가 불러서 써야 하는데 다른 파일에서도 이 컴포넌트를 불러 올 수 있 도록 
//export를 사용하여 확장 해줘야 한다.

//export 방법 2번째
export {BucketList};
export default BucketList;
```

```jsx
import logo from './logo.svg';
import './App.css';
// import BucketList from './BucketList';

//import 방법 2번째
import {BucketList} from "./BucketList";

function App() {
  return (
    <div className="App">
      {/* 자식 요소를 부르는 명령어 */}
      <BucketList/>
    </div>
  );
}

export default App;
```

강의 자료 

## **03. Component (1)**

Component는 클래스형과 함수형이 있습니다. 직전 강의에서 본 컴포넌트가 바로 클래스형 컴포넌트였죠! 
이제 클래스형 컴포넌트는 잘 쓰지 않지만, 우리는 두 가지를 모두 살펴볼거예요.
→ 왜냐하면 이미 기개발된 프로젝트들(아마 여러분이 가야할 회사에서도...!)은 클래스형 컴포넌트를 사용 중일수도 있거든요. 최소한 코드를 알아보고 고칠 수 있을 정도는 알아두는 편이 좋습니다.

- 8) Component란?

    위에서 **리액트는 레고**라고 말씀 드렸죠? **컴포넌트는 블록**입니다!

    - 웹 사이트를 조각내자!

        컴포넌트를 이해하고 잘 써먹으려면 웹 사이트를 잘 조각낼 줄 알아야 합니다.

        가령 우리가 아래와 같은 웹 사이트를 만든다고 생각해봅시다!

        ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2f3f80df-8855-4522-88b4-1cf9f333b4d5/_2020-10-05__4.39.04.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2f3f80df-8855-4522-88b4-1cf9f333b4d5/_2020-10-05__4.39.04.png)

        이 웹사이트를 HTML로 간단히 표현해보면 아래와 같을 겁니다.

        ```html
        <!DOCTYPE html>
        <html lang="en">
          <head>
          </head>
          <body>
            <header> 
                ...
            </header>
            <div class="container">
                <div id="image-banner">
                    ...
                </div>
                <div id="contents-1">
                    ...
                </div>
            </div>
            <footer>
                ...
            </footer>
          </body>
        </html>
        ```

        이 코드를 조각조각 내보면 아래와 같이 나눌 수 있을 거예요. 
        나눈 조각 하나하나를 컴포넌트라고 불러요!

        1. <header/>
        2. <container/>
            1. <imagebanner/>
            2. <contents1/>
        3. <footer/>

        즉, 이 웹 사이트는, 
        크게 <header/>, <container/>, <footer/> 세 개의 컴포넌트가 있고,
        <container/> 컴포넌트는,
        <imagebanner/>, <contents1/> 컴포넌트로 이루어져 있는 거죠! (쉽죠!)

    - Component는 웹 사이트의 조각이고, 우리는 이 조각을 모아서 웹사이트에 뿌려준다.

        웹 사이트를 잘 조각낼 줄 아는 사람 === 리액트를 잘 쓰는 사람

- 9) State와 Props

    Component에서는 그럼 데이터 관리를 어떻게 할까요?
    데이터 관리를 아~주 살짝 맛만 볼게요. 곧 배울 **라이프 사이클**을 위한 선행이라고 생각하시고 가벼운 마음으로 들어보세요!

    - State

        state는 Component가 가지고 있는 데이터입니다.

        아까 스파르타코딩클럽 사이트 조각 중 <header/> 컴포넌트를 예로 들어볼게요!

        ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/81c26015-f467-421f-872c-30a2366d7cf9/_2020-10-05__6.05.11.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/81c26015-f467-421f-872c-30a2366d7cf9/_2020-10-05__6.05.11.png)

        - 이 헤더에 들어갈 데이터는 뭐가 있을까요?

            → 로고 이미지 경로, 메뉴 이름(온라인, 오프라인, 기업교육, 내 강의실)이 있을 겁니다!

        - 이 데이터는 <container/>나 <footer/> 컴포넌트에서는 쓰지 않겠죠!
        - 즉, <header/> 컴포넌트에서만 쓰는 정보인 셈입니다.
        - state는 한 컴포넌트에서만 사용하는 정보를 주로 넣어놓고 생성, 수정하는 데이터입니다.
        - 생성도 수정도 오직 해당 컴포넌트 내에서만 이뤄집니다. 내꺼니까 생성도 수정도 자유롭죠!
    - Props

        props는 Component가 부모 Component로부터 받아온 데이터입니다.

        이번엔 <container/> 컴포넌트를 예로 들어볼게요!

        ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f54d8bcc-a6fe-41ce-b4df-7b6950d41313/_2020-10-05__6.13.25.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f54d8bcc-a6fe-41ce-b4df-7b6950d41313/_2020-10-05__6.13.25.png)

        ```html
        <container>
        	<imagebanner/>
        	<contents1/>
        </container>
        ```

        <container/> 컴포넌트는 두 개의 자식 컴포넌트를 가지고 있죠?

        - <container/> 컴포넌트만 <imangebanner/> 컴포넌트한테 필요한 이미지 경로를 가지고 있다고 가정합니다. (state로 가지고 있다고 가정합니다!)
        - 이 때 <imagebanner/> 컴포넌트는 자신의 부모인 <container/>컴포넌트로부터 **이미지 경로**를 전달받아서 사용해야겠죠?
        - <container/>가 가지고 있는 이미지 경로를 <imagebanner/>에게 전달해주면, 이 **이미지 경로**가 <imagebanner/> 컴포넌트의 props가 됩니다.
        - 다시 말해, 부모 컴포넌트로부터 전달 받은 데이터를 props라고 합니다.
        - 그럼 부모 컴포넌트가 가지고 있는 데이터를 <imagebanner/> 컴포넌트가 추가 하거나 수정할 수 있을까요?

            **Props로 받은 데이터는 수정할 수 없습니다! 남의 것이니까요!**

## 04. Component (2)

- 10) 함수형 Component

    컴포넌트가 뭔지 이제 직접 만들어 봅시다!

    - VSCode를 열고, src 폴더 안에 BucketList.js 파일을 하나 만듭니다.

        리액트 코딩 룰 1: 
        폴더는 소문자로 시작하는 카멜케이스를 사용
        JS파일, 컴포넌트 이름은 대문자로 시작하는 카멜케이스를 사용

        아래 코드를 BucketList.js에 붙여 넣어보세요.

        - **[코드스니펫] - 함수형 컴포넌트**

            ```jsx
            // 리액트 패키지를 불러옵니다.
            import React from 'react'; 

            // 함수형 컴포넌트는 이렇게 쓸 수도 있고
            // function Bucketlist(props){
            //     return (
            //         <div>버킷 리스트</div>
            //     );
            // }

            // 이렇게 쓸 수도 있어요. =>가 들어간 함수를 화살표 함수라고 불러요.
            // 저희는 앞으로 화살표 함수를 사용할거예요.
            // 앗 () 안에 props! 부모 컴포넌트에게 받아온 데이터입니다.
            // js 함수가 값을 받아오는 것과 똑같이 받아오네요.
            const BucketList = (props) => {

                // 컴포넌트가 뿌려줄 ui 요소(리엑트 엘리먼트라고 불러요.)를 반환해줍니다.
                return (
                    <div>
                        버킷 리스트
                    </div>
                );
            }

            // 우리가 만든 함수형 컴포넌트를 export 해줍니다.
            // export 해주면 다른 컴포넌트에서 BucketList 컴포넌트를 불러다 쓸 수 있어요.
            export default BucketList;
            ```

    - 그리고 App.js로 돌아가서 BucketList 컴포넌트를 불러와 봅시다.
        - **[코드스니펫] - 컴포넌트 불러오기**

            ```jsx
            import React from 'react';
            import logo from './logo.svg';
            import './App.css';
            // BucketList 컴포넌트를 import 해옵니다.
            // import [컴포넌트 명] from [컴포넌트가 있는 파일경로];
            import BucketList from './BucketList';

            function App() {

              return (
                <div className="App">
                  <h1>내 버킷리스트</h1>
                  {/* 컴포넌트를 넣어줍니다. */}
                  <BucketList/>
                </div>
              );
            }

            export default App;
            ```

    - 이제 크롬으로 돌아가 컴포넌트가 나오는 지 확인해봅시다.

        ![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f961d814-7db6-4aac-b090-b845c243918c/_2020-10-05__6.52.40.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f961d814-7db6-4aac-b090-b845c243918c/_2020-10-05__6.52.40.png)
